/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package in.co.rahogata.springboot.autoconfigure.lettucessl;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.context.annotation.Import;
import org.springframework.data.redis.RedisConnectionFailureException;
import org.springframework.data.redis.core.StringRedisTemplate;
import redis.embedded.RedisServer;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

class LibraryTest {

    private ApplicationContextRunner contextRunner;
    private RedisServer redisServer;

    @TestConfiguration
    @ImportAutoConfiguration(RedisAutoConfiguration.class)
    @Import(LettuceSslConnectionConfiguration.class)
    static class TestAutoConfiguration {

    }

    @BeforeEach
    void setUp() {
        this.contextRunner = new ApplicationContextRunner()
                .withConfiguration(AutoConfigurations.of(TestAutoConfiguration.class));
    }

    @AfterEach
    void tearDown() {
        try {
            if (null != this.redisServer) {
                this.redisServer.stop();
            }
        } catch (IOException e) {
            fail(e);
        }
    }

    @Test
    @DisplayName("with tls")
    void redis1() {
        this.contextRunner.withPropertyValues("rahogata.lettuce.ssl.key-store-location=classpath:redis-client.p12",
                "rahogata.lettuce.ssl.key-store-password=ramana", "rahogata.lettuce.ssl.key-store-type=PKCS12",
                "rahogata.lettuce.ssl.verifyPeer=true", "rahogata.lettuce.ssl.trust-store-location=classpath:ca.p12",
                "rahogata.lettuce.ssl.trust-store-password=ramana", "spring.redis.host=localhost", "spring.redis.port=7000",
                "spring.redis.ssl=true", "spring.redis.password=hanuma").run(c -> {
            assertNotNull(c.getBean(StringRedisTemplate.class));
            StringRedisTemplate stringRedisTemplate = c.getBean(StringRedisTemplate.class);
            stringRedisTemplate.opsForValue().set("rama", "seeta");
            assertEquals("seeta", stringRedisTemplate.opsForValue().get("rama"));
        });
    }

    @Test
    @DisplayName("without tls without password")
    void redis2() {
        try {
            this.redisServer = RedisServer.newRedisServer().port(6371).build();
            this.redisServer.start();
            this.contextRunner.withPropertyValues("spring.redis.host=localhost", "spring.redis.port=6371").run(c -> {
                assertNotNull(c.getBean(StringRedisTemplate.class));
                StringRedisTemplate stringRedisTemplate = c.getBean(StringRedisTemplate.class);
                stringRedisTemplate.opsForValue().set("rama", "seeta");
                assertEquals("seeta", stringRedisTemplate.opsForValue().get("rama"));
            });
        } catch (IOException e) {
            fail(e);
        }
    }

    @Test
    @DisplayName("without tls and wrong password")
    void redis3() {
        try {
            this.redisServer = RedisServer.newRedisServer().port(6372)
                    .setting("requirepass janaki").build();
            this.redisServer.start();
            this.contextRunner.withPropertyValues("spring.redis.host=localhost", "spring.redis.port=6372",
                    "spring.redis.password=wrong").run(c -> {
                assertNotNull(c.getBean(StringRedisTemplate.class));
                StringRedisTemplate stringRedisTemplate = c.getBean(StringRedisTemplate.class);
                assertThrows(RedisConnectionFailureException.class, () -> stringRedisTemplate.opsForValue().set("rama", "seeta"));
            });
        } catch (IOException e) {
            fail(e);
        }
    }

    @Test
    @DisplayName("without tls and correct password")
    void redis4() {
        try {
            this.redisServer = RedisServer.newRedisServer().port(6373)
                    .setting("requirepass janaki").build();
            this.redisServer.start();
            this.contextRunner.withPropertyValues("spring.redis.host=localhost", "spring.redis.port=6373",
                    "spring.redis.password=janaki").run(c -> {
                assertNotNull(c.getBean(StringRedisTemplate.class));
                StringRedisTemplate stringRedisTemplate = c.getBean(StringRedisTemplate.class);
                stringRedisTemplate.opsForValue().set("rama", "seeta");
                assertEquals("seeta", stringRedisTemplate.opsForValue().get("rama"));
            });
        } catch (IOException e) {
            fail(e);
        }
    }
}
